// ==UserScript==
// @name          discobolus
// @author        Jeremie Jarosh
// @namespace     http://trejeraos.com/
// @description   A third party add-on for the website dcbservice.com
// @version       0.1.4
// @include       http://dcbservice.com/*
// @include       http://www.dcbservice.com/*
// @include       https://dcbservice.com/*
// @include       https://www.dcbservice.com/*
// ==/UserScript==

var htmlClass = "discobolus"

var elmHead = document.head;
var elmHtml = document.body.parentElement;
var elmStyle;
var elmScript;

var stylesDataUrl = "data:text/css;charset=utf-8;base64,LmRpc2NvYm9sdXMgLmhpZGRlbiB7CiAgZGlzcGxheTogbm9uZTsKfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMzg0cHgpIHsKICAuZGlzY29ib2x1cyAuY29udGVudC13cmFwcGVyIHsKICAgIHdpZHRoOiAxMzUwcHg7CiAgfQogIC5kaXNjb2JvbHVzIC5yaWdodGNvbCB7CiAgICB3aWR0aDogMTA3NHB4OwogIH0KICAuZGlzY29ib2x1cyAuY29udHJvbHN0cmlwIHsKICAgIGJhY2tncm91bmQtc2l6ZTogMTEwMXB4IDY0cHg7CiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uLXg6IC01cHg7CiAgfQogIC5kaXNjb2JvbHVzIC5wcm9kdWN0ZGV0YWlsIGgxLnRpdGxlIHsKICAgIHdpZHRoOiA4MjBweDsKICB9CiAgLmRpc2NvYm9sdXMgLmRldGFpbGRhdGFjb2wgewogICAgd2lkdGg6IDQ0MHB4OwogIH0KfQpAbWVkaWEgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxNzQycHgpIHsKICAuZGlzY29ib2x1cyAuY29udGVudC13cmFwcGVyIHsKICAgIHdpZHRoOiAxNzA4cHg7CiAgfQogIC5kaXNjb2JvbHVzIC5yaWdodGNvbCB7CiAgICB3aWR0aDogMTQzMnB4OwogIH0KICAuZGlzY29ib2x1cyAuY29udHJvbHN0cmlwIHsKICAgIGJhY2tncm91bmQtc2l6ZTogMTQ2OXB4IDY0cHg7CiAgICBiYWNrZ3JvdW5kLXBvc2l0aW9uLXg6IC0xMHB4OwogIH0KfQouZGlzY29ib2x1cyAjZGNic21lbnUgewogIGJhY2tncm91bmQtY29sb3I6ICMwMDA0MGU7Cn0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTM4NHB4KSB7CiAgLmRpc2NvYm9sdXMgLmhlYWRtZW51IHsKICAgIHdpZHRoOiAxMzUwcHg7CiAgfQogIC5kaXNjb2JvbHVzICNkY2JzbWVudSB7CiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2h0dHBzOi8vd3d3LmRjYnNlcnZpY2UuY29tL2NvbnRlbnQvbWVudWJhcjIvdHJhZGVwYXBlcmJhY2tzLnBuZycpOwogICAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICAgIGJhY2tncm91bmQtcG9zaXRpb246IDY4NXB4IDBweDsKICAgIGJhY2tncm91bmQtc2l6ZTogMzYzcHggMzZweDsKICB9CiAgLmRpc2NvYm9sdXMgI25hdnNlYXJjaGJveGJnLAogIC5kaXNjb2JvbHVzICNuYXZzZWFyY2ggewogICAgZmxvYXQ6IG5vbmU7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDBweDsKICB9CiAgLmRpc2NvYm9sdXMgI25hdnNlYXJjaGJveGJnIHsKICAgIHJpZ2h0OiA0OHB4OwogIH0KICAuZGlzY29ib2x1cyAjbmF2c2VhcmNoIHsKICAgIHJpZ2h0OiAwcHg7CiAgfQp9CkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE3NDJweCkgewogIC5kaXNjb2JvbHVzIC5oZWFkbWVudSB7CiAgICB3aWR0aDogMTcwOHB4OwogIH0KICAuZGlzY29ib2x1cyAjZGNic21lbnUgewogICAgYmFja2dyb3VuZC1zaXplOiA3MjNweCAzNnB4OwogIH0KfQouZGlzY29ib2x1cy5pbmZpbml0ZS1zY3JvbGwgdWwucGFnZXIgewogIHZpc2liaWxpdHk6IGhpZGRlbjsKfQouZGlzY29ib2x1cy5pbmZpbml0ZS1zY3JvbGwgLmluZmluaXRlLXNjcm9sbC1sb2FkaW5nIHsKICBjbGVhcjogYm90aDsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgaGVpZ2h0OiAyLjVlbTsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIHRleHQtYWxpZ246IGNlbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjMTYxYzJhOwogIGJvcmRlcjogMXB4IHNvbGlkICMwMDA7CiAgY29sb3I6IHdoaXRlOwogIG1hcmdpbjogMHB4OwogIHBhZGRpbmc6IDNweDsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuM3MgZWFzZS1pbi1vdXQ7CiAgb3BhY2l0eTogMDsKfQouZGlzY29ib2x1cy5pbmZpbml0ZS1zY3JvbGwgLmluZmluaXRlLXNjcm9sbC1sb2FkaW5nOjphZnRlciB7CiAgY29udGVudDogIiAiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBsaW5lLWhlaWdodDogMWVtOwogIHRvcDogMC43NWVtOwogIGxlZnQ6IDBweDsKICByaWdodDogMHB4Owp9Ci5kaXNjb2JvbHVzLmluZmluaXRlLXNjcm9sbCAuaW5maW5pdGUtc2Nyb2xsLWxvYWRpbmcuYWN0aXZlIHsKICBvcGFjaXR5OiAxOwp9Ci5kaXNjb2JvbHVzLmluZmluaXRlLXNjcm9sbCAuaW5maW5pdGUtc2Nyb2xsLWxvYWRpbmcuYWN0aXZlOjphZnRlciB7CiAgY29udGVudDogIkxvYWRpbmfigKYiOwogIGFuaW1hdGlvbjogcHVsc2F0ZSAzcyBlYXNlLW91dCBpbmZpbml0ZTsKICBvcGFjaXR5OiAwLjU7Cn0KQGtleWZyYW1lcyBwdWxzYXRlIHsKICAwJSB7CiAgICBvcGFjaXR5OiAwLjU7CiAgfQogIDUwJSB7CiAgICBvcGFjaXR5OiAxOwogIH0KICAxMDAlIHsKICAgIG9wYWNpdHk6IDAuNTsKICB9Cn0KLmRpc2NvYm9sdXMgLnRodW1ibGlzdC5oaWdobGlnaHQtbmV3LXNlcmllcyBsaTpub3QoLm5ldy1zZXJpZXMpLAouZGlzY29ib2x1cyAudGh1bWJsaXN0LmhpZ2hsaWdodC1uZXctc2VyaWVzIC5yZWxpc3QubmV3LXNlcmllcywKLmRpc2NvYm9sdXMgLnRodW1ibGlzdC5oaWdobGlnaHQtbmV3LXNlcmllcyAuZXhpc3Rpbmctc2VyaWVzIHsKICBkaXNwbGF5OiBub25lOwp9Ci5kaXNjb2JvbHVzIC5oaWdobGlnaHQtbmV3LXNlcmllcy1jb250cm9sID4gaW5wdXRbdHlwZT1jaGVja2JveF0gewogIG1hcmdpbjogMHB4IDZweDsKICB3aWR0aDogdW5zZXQ7CiAgaGVpZ2h0OiB1bnNldDsKfQouZGlzY29ib2x1cyAub3JkZXJsaXN0IC5vcmRlci1zdGF0dXMgPiBzcGFuOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIvIjsKICBwYWRkaW5nOiAwIDAuMmVtOwogIG9wYWNpdHk6IDAuNTsKfQouZGlzY29ib2x1cyAub3JkZXJsaXN0IC5vcmRlci1zdGF0dXMgPiBzcGFuOmZpcnN0LWNoaWxkOjpiZWZvcmUgewogIGNvbnRlbnQ6ICIiOwp9Ci5kaXNjb2JvbHVzIC51c2Vyc2NyaXB0LXNldHRpbmdzLWxpbmsgewogIGZvbnQtc3R5bGU6IGl0YWxpYzsKfQo=";
var scriptDataUrl = "data:text/javascript;charset=utf-8;base64,";

// add Class to html for easier css overrides
elmHtml.classList.add(htmlClass);

// add style to the head
elmStyle = document.createElement("link");
elmStyle.setAttribute('type', "text/css");
elmStyle.setAttribute('rel', "stylesheet");
elmStyle.setAttribute('title', htmlClass);
elmStyle.setAttribute('href', stylesDataUrl);
elmHead.appendChild(elmStyle);

// add javascript to the head
elmScript = document.createElement("script");
elmScript.setAttribute('type','text/javascript');
elmScript.setAttribute('title', htmlClass);
elmScript.setAttribute('src', scriptDataUrl);
elmHead.appendChild(elmScript);
